version: '3.8'

services:
  # Main application
  app:
    build: .
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/msme_atlas
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ML_SERVICE_URL=http://ml-service:8000
      - ML_API_KEY=${ML_API_KEY:-your-secure-api-key}
    depends_on:
      - postgres
      - redis
      - ml-service
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - msme-network
    restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=msme_atlas
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - msme-network
    restart: unless-stopped

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - msme-network
    restart: unless-stopped

  # ML Service with FastAPI
  ml-service:
    build: 
      context: ./server/ml
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ML_API_KEY=${ML_API_KEY:-your-secure-api-key}
    volumes:
      - ./server/ml:/app
      - ml_models:/app/models
    networks:
      - msme-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background worker
  worker:
    build: .
    command: npm run worker
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/msme_atlas
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ML_SERVICE_URL=http://ml-service:8000
      - ML_API_KEY=${ML_API_KEY:-your-secure-api-key}
    depends_on:
      - postgres
      - redis
      - ml-service
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - msme-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - msme-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - msme-network
    restart: unless-stopped

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - msme-network
    restart: unless-stopped

  # Jupyter notebook for ML development
  jupyter:
    build:
      context: ./server/ml
      dockerfile: Dockerfile.jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_TOKEN=your-jupyter-token
    volumes:
      - ./server/ml:/app
      - ml_models:/app/models
      - ./notebooks:/app/notebooks
    networks:
      - msme-network
    restart: unless-stopped

networks:
  msme-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  ml_models:
  prometheus_data:
  grafana_data: