version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: msme_square
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deploy/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - msme-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - msme-network

  server:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/msme_square
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-here
      - MSG91_AUTH_KEY=${MSG91_AUTH_KEY}
      - PORT=5000
    ports:
      - "5000:5000"
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - msme-network
    command: npm run dev

  client:
    build:
      context: .
      dockerfile: Dockerfile.client
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:5000
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - server
    networks:
      - msme-network
    command: npm run dev:client

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/msme_square
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-here
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - msme-network
    command: npm run scheduler

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf
      - ./deploy/ssl:/etc/nginx/ssl
    depends_on:
      - client
      - server
    networks:
      - msme-network

volumes:
  postgres_data:
  redis_data:

networks:
  msme-network:
    driver: bridge