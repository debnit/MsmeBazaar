version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: msmebazaar-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: msmebazaar_v2
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./libs/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: msmebazaar-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: msmebazaar-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # Weaviate Vector Database
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: msmebazaar-weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-openai,generative-openai'
      CLUSTER_HOSTNAME: 'node1'
    ports:
      - "8080:8080"
    volumes:
      - weaviate_data:/var/lib/weaviate
    restart: unless-stopped

  # Auth API Service
  auth-api:
    build:
      context: ./apps/auth-api
      dockerfile: Dockerfile
    container_name: msmebazaar-auth-api
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/msmebazaar_v2
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/auth-api:/app
      - ./libs:/app/libs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MSME API Service
  msme-api:
    build:
      context: ./apps/msme-api
      dockerfile: Dockerfile
    container_name: msmebazaar-msme-api
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/msmebazaar_v2
      - REDIS_URL=redis://redis:6379
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./apps/msme-api:/app
      - ./libs:/app/libs
    restart: unless-stopped

  # Valuation API Service
  valuation-api:
    build:
      context: ./apps/valuation-api
      dockerfile: Dockerfile
    container_name: msmebazaar-valuation-api
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/msmebazaar_v2
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/valuation-api:/app
      - ./libs:/app/libs
      - ./models:/app/models
    restart: unless-stopped

  # Match API Service
  match-api:
    build:
      context: ./apps/match-api
      dockerfile: Dockerfile
    container_name: msmebazaar-match-api
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/msmebazaar_v2
      - REDIS_URL=redis://redis:6379
      - WEAVIATE_URL=http://weaviate:8080
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "8003:8003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      weaviate:
        condition: service_started
    volumes:
      - ./apps/match-api:/app
      - ./libs:/app/libs
    restart: unless-stopped

  # Admin API Service
  admin-api:
    build:
      context: ./apps/admin-api
      dockerfile: Dockerfile
    container_name: msmebazaar-admin-api
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/msmebazaar_v2
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "8004:8004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/admin-api:/app
      - ./libs:/app/libs
    restart: unless-stopped

  # Loan Service
  loan-service:
    build:
      context: ./microservices/loan-service
      dockerfile: Dockerfile
    container_name: msmebazaar-loan-service
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/msmebazaar_v2
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - ENVIRONMENT=development
    ports:
      - "8004:8004"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./microservices/loan-service:/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Exit Service
  exit-service:
    build:
      context: ./microservices/exit-service
      dockerfile: Dockerfile
    container_name: msmebazaar-exit-service
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/msmebazaar_v2
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - ENVIRONMENT=development
    ports:
      - "8005:8005"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./microservices/exit-service:/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Web Application
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: msmebazaar-web
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${JWT_SECRET}
      - NEXTAUTH_URL=http://localhost:3000
    ports:
      - "3000:3000"
    depends_on:
      - auth-api
      - msme-api
      - valuation-api
      - match-api
      - admin-api
      - loan-service
      - exit-service
    volumes:
      - ./apps/web:/app
      - ./libs:/app/libs
    restart: unless-stopped

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: msmebazaar-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./devops/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: msmebazaar-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./devops/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./devops/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:
  weaviate_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: msmebazaar-network