name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    # Install dependencies for main project
    - name: Install root dependencies
      run: npm ci
      
    # Install dependencies for MSMEBazaar V2 monorepo
    - name: Install MSMEBazaar V2 dependencies
      working-directory: msmebazaar-v2
      run: pnpm install --frozen-lockfile
    
    # TypeScript type checking for MSMEBazaar V2
    - name: TypeScript check - All packages
      working-directory: msmebazaar-v2
      run: pnpm run type-check
       
    # TypeScript check for root project
    - name: TypeScript check - Root
      run: npx tsc --noEmit
    
    # TypeScript check for Admin Dashboard
    - name: TypeScript check - Admin Dashboard
      working-directory: apps/admin-dashboard
      run: npm run type-check
    
    - name: Run tests - MSMEBazaar V2
      working-directory: msmebazaar-v2
      run: pnpm run test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
    
    - name: Build MSMEBazaar V2
      working-directory: msmebazaar-v2
      run: pnpm run build
    
    - name: Build Admin Dashboard
      working-directory: apps/admin-dashboard
      run: npm run build
    
    - name: Run security audit
      run: npm audit --audit-level moderate
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: build-artifacts
        path: |
          msmebazaar-v2/apps/web/.next/
          apps/admin-dashboard/.next/
        retention-days: 1

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # Build Docker images for scanning
    - name: Build Web App Docker Image
      run: |
        cd msmebazaar-v2/apps/web
        docker build -t msmebazaar-web:latest .
    
    - name: Build Auth API Docker Image
      run: |
        cd msmebazaar-v2/apps/auth-api
        docker build -t msmebazaar-auth-api:latest .
    
    - name: Build MSME API Docker Image
      run: |
        cd msmebazaar-v2/apps/msme-api
        docker build -t msmebazaar-msme-api:latest .
    
    - name: Build Admin API Docker Image
      run: |
        cd msmebazaar-v2/apps/admin-api
        docker build -t msmebazaar-admin-api:latest .
    
    - name: Build Match API Docker Image
      run: |
        cd msmebazaar-v2/apps/match-api
        docker build -t msmebazaar-match-api:latest .
    
    # Run Trivy filesystem scan on source code
    - name: Run Trivy filesystem scan - Root
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-root.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'
    
    - name: Run Trivy filesystem scan - MSMEBazaar V2
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './msmebazaar-v2'
        format: 'sarif'
        output: 'trivy-fs-v2.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '0'
    
    # Run Trivy Docker image scans
    - name: Run Trivy scan on Web App image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'msmebazaar-web:latest'
        format: 'sarif'
        output: 'trivy-web-image.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '0'
    
    - name: Run Trivy scan on Auth API image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'msmebazaar-auth-api:latest'
        format: 'sarif'
        output: 'trivy-auth-image.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '0'
    
    - name: Run Trivy scan on MSME API image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'msmebazaar-msme-api:latest'
        format: 'sarif'
        output: 'trivy-msme-image.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '0'
    
    - name: Run Trivy scan on Admin API image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'msmebazaar-admin-api:latest'
        format: 'sarif'
        output: 'trivy-admin-image.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '0'
    
    - name: Run Trivy scan on Match API image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'msmebazaar-match-api:latest'
        format: 'sarif'
        output: 'trivy-match-image.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '0'
    
    # Generate comprehensive security report
    - name: Generate Trivy security report
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        output: 'security-report.txt'
        severity: 'CRITICAL,HIGH,MEDIUM,LOW'
        exit-code: '0'
    
    # Check for critical vulnerabilities and fail CI if found
    - name: Check for critical vulnerabilities
      run: |
        echo "=== SECURITY SCAN RESULTS ==="
        
        # Function to check for critical/high vulnerabilities in SARIF files
        check_sarif_vulnerabilities() {
          local file=$1
          local name=$2
          
          if [ -f "$file" ]; then
            echo "Checking $name..."
            
            # Extract critical and high severity issues from SARIF
            critical_count=$(jq '.runs[0].results | map(select(.level == "error" or .ruleId | contains("CRITICAL"))) | length' "$file" 2>/dev/null || echo "0")
            high_count=$(jq '.runs[0].results | map(select(.level == "warning" or .ruleId | contains("HIGH"))) | length' "$file" 2>/dev/null || echo "0")
            
            echo "  Critical vulnerabilities: $critical_count"
            echo "  High vulnerabilities: $high_count"
            
            # Return the total count
            echo $((critical_count + high_count))
          else
            echo "SARIF file $file not found"
            echo "0"
          fi
        }
        
        total_critical_high=0
        
        # Check all SARIF files
        total_critical_high=$((total_critical_high + $(check_sarif_vulnerabilities "trivy-fs-root.sarif" "Root Filesystem")))
        total_critical_high=$((total_critical_high + $(check_sarif_vulnerabilities "trivy-fs-v2.sarif" "MSMEBazaar V2 Filesystem")))
        total_critical_high=$((total_critical_high + $(check_sarif_vulnerabilities "trivy-web-image.sarif" "Web App Docker Image")))
        total_critical_high=$((total_critical_high + $(check_sarif_vulnerabilities "trivy-auth-image.sarif" "Auth API Docker Image")))
        total_critical_high=$((total_critical_high + $(check_sarif_vulnerabilities "trivy-msme-image.sarif" "MSME API Docker Image")))
        total_critical_high=$((total_critical_high + $(check_sarif_vulnerabilities "trivy-admin-image.sarif" "Admin API Docker Image")))
        total_critical_high=$((total_critical_high + $(check_sarif_vulnerabilities "trivy-match-image.sarif" "Match API Docker Image")))
        
        echo ""
        echo "=== TOTAL CRITICAL/HIGH VULNERABILITIES: $total_critical_high ==="
        
        # Display the full security report
        echo ""
        echo "=== DETAILED SECURITY REPORT ==="
        if [ -f "security-report.txt" ]; then
          cat security-report.txt
        fi
        
        # Fail the CI if critical or high vulnerabilities are found
        if [ $total_critical_high -gt 0 ]; then
          echo ""
          echo "❌ SECURITY SCAN FAILED: Found $total_critical_high critical or high severity vulnerabilities!"
          echo "Please review and fix the vulnerabilities before proceeding."
          echo "Check the uploaded security reports for details."
          exit 1
        else
          echo ""
          echo "✅ SECURITY SCAN PASSED: No critical or high severity vulnerabilities found!"
        fi
    
    # Upload all security scan results
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: '.'
        category: 'trivy-security-scan'
    
    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          *.sarif
          security-report.txt
        retention-days: 30
    
    # Run additional security tools
    - name: Run npm audit
      working-directory: msmebazaar-v2
      run: |
        echo "=== NPM SECURITY AUDIT ==="
        npm audit --audit-level high || true
        
        # Generate npm audit report
        npm audit --json > npm-audit-report.json || true
        
        # Check for high/critical npm vulnerabilities
        high_critical=$(jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' npm-audit-report.json 2>/dev/null || echo "0")
        
        echo "NPM High/Critical vulnerabilities: $high_critical"
        
        if [ "$high_critical" -gt 0 ]; then
          echo "❌ NPM AUDIT FAILED: Found $high_critical high/critical vulnerabilities!"
          npm audit
          exit 1
        else
          echo "✅ NPM AUDIT PASSED: No high/critical vulnerabilities found!"
        fi
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --all-projects
      continue-on-error: true

  deploy:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./build-artifacts
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Add your deployment commands here
    
    - name: Health check after deployment
      run: |
        echo "Waiting for deployment to be ready..."
        sleep 30
        curl -f https://your-domain.com/health || exit 1
    
    - name: Notify uptime monitors
      run: |
        # UptimeRobot heartbeat
        curl -X POST "https://api.uptimerobot.com/v2/getMonitors" \
          -H "Content-Type: application/json" \
          -d '{"api_key": "${{ secrets.UPTIMEROBOT_API_KEY }}", "format": "json"}'
        
        # Cronitor heartbeat
        curl "https://cronitor.link/${{ secrets.CRONITOR_MONITOR_ID }}/complete"
    
    - name: Send deployment notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  performance-test:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'
    
    - name: Install dependencies
      working-directory: msmebazaar-v2
      run: pnpm install --frozen-lockfile
    
    - name: Start application
      working-directory: msmebazaar-v2
      run: |
        pnpm run start &
        sleep 15
    
    - name: Run load tests
      run: |
        npx autocannon -c 10 -d 30 -p 10 http://localhost:3000/health
        npx autocannon -c 5 -d 30 -p 5 http://localhost:3000/api/msme/listings
    
    - name: Performance baseline check
      run: |
        # Check if response time is under 200ms
        response_time=$(curl -w "%{time_total}" -s -o /dev/null http://localhost:3000/health)
        if (( $(echo "$response_time > 0.2" | bc -l) )); then
          echo "Performance regression detected: ${response_time}s > 200ms"
          exit 1
        fi