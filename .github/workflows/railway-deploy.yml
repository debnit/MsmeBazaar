# 🚂 Railway Deployment Workflow - Fast & Simple
name: Deploy to Railway

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development

jobs:
  # ============================================================================
  # 🏗️ BUILD JOB
  # ============================================================================
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    
    steps:
    - name: 📅 Checkout code
      uses: actions/checkout@v4

    - name: 📈 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci --no-audit --no-fund

    - name: 🔨 Build application
      run: npm run build

    - name: 📊 Build summary
      run: |
        echo "✅ Build completed successfully"
        echo "📦 Build size: $(du -sh dist/ 2>/dev/null || echo 'N/A')"

  # ============================================================================
  # 🚂 RAILWAY DEPLOYMENT - Production
  # ============================================================================
  deploy-railway-production:
    name: 🚂 Deploy to Railway (Production)
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: 
      name: railway-production
     
    
    steps:
    - name: 📅 Checkout code
      uses: actions/checkout@v4

    - name: 🚂 Install Railway CLI
      run: |
        npm install -g @railway/cli
        
    - name: 🚂 Set Railway Environment Variables
      run: |
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway variables set NODE_ENV=production
        railway variables set DATABASE_URL="${{ secrets.DATABASE_URL }}"
        railway variables set REDIS_URL="${{ secrets.REDIS_URL }}"
        railway variables set JWT_SECRET="${{ secrets.JWT_SECRET }}"
        railway variables set NEXTAUTH_SECRET="${{ secrets.NEXTAUTH_SECRET }}"
        railway variables set RAZORPAY_KEY_ID="${{ secrets.RAZORPAY_KEY_ID }}"
        railway variables set RAZORPAY_KEY_SECRET="${{ secrets.RAZORPAY_KEY_SECRET }}"
        railway variables set SENTRY_DSN="${{ secrets.SENTRY_DSN }}"
        railway variables set TYPESENSE_HOST="${{ secrets.TYPESENSE_HOST }}"
        railway variables set TYPESENSE_API_KEY="${{ secrets.TYPESENSE_API_KEY }}"
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        
    - name: 🚂 Deploy to Railway
      run: |
        railway up --detach
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

    - name: ⏳ Wait for deployment
      run: |
        echo "⏳ Waiting for Railway deployment to complete..."
        sleep 60
        
    - name: 🔍 Health check
      run: |
        echo "🔍 Performing health check..."
        SERVICE_URL="${{ secrets.RAILWAY_PRODUCTION_URL }}"
        
        # Multiple health check attempts
        for i in {1..5}; do
          echo "Health check attempt $i/5..."
          if curl -f -s "${SERVICE_URL}/health" > /dev/null 2>&1; then
            echo "✅ Health check passed!"
            break
          elif [ $i -eq 5 ]; then
            echo "⚠️ Health check failed after 5 attempts"
            # Don't fail the deployment, just warn
          else
            echo "Retrying in 30 seconds..."
            sleep 30
          fi
        done

    - name: 📊 Deployment summary
      run: |
        echo "## 🚂 Railway Production Deployment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Status** | ✅ Deployed |" >> $GITHUB_STEP_SUMMARY
        echo "| **Environment** | Production |" >> $GITHUB_STEP_SUMMARY
        echo "| **Service URL** | ${{ secrets.RAILWAY_PRODUCTION_URL }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Service Name** | ${{ secrets.RAILWAY_SERVICE_NAME || 'msme-production' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Deployed At** | $(date -u) |" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # 🚂 RAILWAY DEPLOYMENT - Staging
  # ============================================================================
  deploy-railway-staging:
    name: 🚂 Deploy to Railway (Staging)
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: 
      name: railway-staging
      url: ${{ secrets.RAILWAY_STAGING_URL }}
    
    steps:
    - name: 📅 Checkout code
      uses: actions/checkout@v4

    - name: 🚂 Install Railway CLI
      run: |
        npm install -g @railway/cli
        
    - name: 🚂 Set Railway Staging Environment Variables
      run: |
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway variables set NODE_ENV=staging --environment staging
        railway variables set DATABASE_URL="${{ secrets.STAGING_DATABASE_URL }}" --environment staging
        railway variables set REDIS_URL="${{ secrets.STAGING_REDIS_URL }}" --environment staging
        railway variables set JWT_SECRET="${{ secrets.STAGING_JWT_SECRET }}" --environment staging
        railway variables set NEXTAUTH_SECRET="${{ secrets.STAGING_NEXTAUTH_SECRET }}" --environment staging
        railway variables set RAZORPAY_KEY_ID="${{ secrets.STAGING_RAZORPAY_KEY_ID }}" --environment staging
        railway variables set RAZORPAY_KEY_SECRET="${{ secrets.STAGING_RAZORPAY_KEY_SECRET }}" --environment staging
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        
    - name: 🚂 Deploy to Railway Staging
      run: |
        railway up --detach --environment staging
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

    - name: 🔍 Staging health check
      run: |
        echo "🔍 Staging health check..."
        SERVICE_URL="${{ secrets.RAILWAY_STAGING_URL }}"
        
        if curl -f "${SERVICE_URL}/health" 2>/dev/null; then
          echo "✅ Staging service is healthy"
        else
          echo "⚠️ Staging health check failed (may still be starting)"
        fi

  # ============================================================================
  # 🧪 POST-DEPLOYMENT TESTS
  # ============================================================================
  railway-tests:
    name: 🧪 Railway Integration Tests
    needs: [deploy-railway-production]
    runs-on: ubuntu-latest
    if: always() && needs.deploy-railway-production.result == 'success'
    
    steps:
    - name: 🔍 API Tests
      run: |
        SERVICE_URL="${{ secrets.RAILWAY_PRODUCTION_URL }}"
        echo "🧪 Testing Railway deployment endpoints..."
        
        # Test API endpoints
        echo "Testing: ${SERVICE_URL}/health"
        curl -f "${SERVICE_URL}/health" || echo "❌ Health endpoint failed"
        
        echo "Testing: ${SERVICE_URL}/api/health"
        curl -f "${SERVICE_URL}/api/health" || echo "❌ API health failed"
        
        echo "Testing: ${SERVICE_URL}/api/status"
        curl -f "${SERVICE_URL}/api/status" || echo "❌ Status endpoint failed"

    - name: 📈 Performance test
      run: |
        SERVICE_URL="${{ secrets.RAILWAY_PRODUCTION_URL }}"
        echo "📈 Railway performance test..."
        
        # Simple load test
        for i in {1..10}; do
          RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" "${SERVICE_URL}/")
          echo "Request $i: ${RESPONSE_TIME}s"
        done
        
        echo "✅ Performance test completed"

  # ============================================================================
  # 🔄 RAILWAY DATABASE MIGRATIONS
  # ============================================================================
  railway-migrations:
    name: 🔄 Run Database Migrations
    needs: deploy-railway-production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📅 Checkout code
      uses: actions/checkout@v4

    - name: 📈 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci --no-audit --no-fund

    - name: 🔄 Run migrations
      run: |
        echo "🔄 Running database migrations..."
        # Run Drizzle migrations
        npx drizzle-kit push --config=drizzle.config.ts
        echo "✅ Migrations completed"
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: 🌱 Seed database (if needed)
      run: |
        echo "🌱 Seeding database..."
        # Add your seed script here if you have one
        # npm run seed
        echo "✅ Database seeding completed"
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      continue-on-error: true
