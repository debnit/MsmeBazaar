name: VyapaarMitra Production Deployment

on:
  push:
    branches: [main, release]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: vyapaarmitra

jobs:
  # Lint and Test Jobs
  lint-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [web, auth-api, msme-api, valuation-api]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        if: matrix.service == 'web'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: msmebazaar-v2/apps/${{ matrix.service }}/package-lock.json
          
      - name: Setup Python
        if: matrix.service != 'web'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Node.js dependencies
        if: matrix.service == 'web'
        working-directory: msmebazaar-v2/apps/${{ matrix.service }}
        run: |
          npm ci
          
      - name: Install Python dependencies
        if: matrix.service != 'web'
        working-directory: msmebazaar-v2/apps/${{ matrix.service }}
        run: |
          pip install -r requirements.txt
          pip install pytest black mypy bandit
          
      - name: Lint TypeScript
        if: matrix.service == 'web'
        working-directory: msmebazaar-v2/apps/${{ matrix.service }}
        run: |
          npm run lint
          npm run type-check
          
      - name: Lint Python
        if: matrix.service != 'web'
        working-directory: msmebazaar-v2/apps/${{ matrix.service }}
        run: |
          black --check .
          mypy . --ignore-missing-imports
          
      - name: Run security scan (Python)
        if: matrix.service != 'web'
        working-directory: msmebazaar-v2/apps/${{ matrix.service }}
        run: |
          bandit -r . -f json -o bandit-report.json || true
          
      - name: Run tests (Node.js)
        if: matrix.service == 'web'
        working-directory: msmebazaar-v2/apps/${{ matrix.service }}
        run: |
          npm test -- --coverage --watchAll=false
          
      - name: Run tests (Python)
        if: matrix.service != 'web'
        working-directory: msmebazaar-v2/apps/${{ matrix.service }}
        run: |
          pytest --cov=. --cov-report=xml
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./msmebazaar-v2/apps/${{ matrix.service }}/coverage.xml
          flags: ${{ matrix.service }}
          name: codecov-${{ matrix.service }}

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/ci
            p/security-audit
            p/secrets
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  # Build Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release'
    
    strategy:
      matrix:
        service: [web, auth-api, msme-api, valuation-api]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: msmebazaar-v2/apps/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:latest
          format: 'sarif'
          output: 'container-scan-${{ matrix.service }}.sarif'
          
      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'container-scan-${{ matrix.service }}.sarif'

  # Database Migration
  migrate-database:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run database migrations (Prisma)
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          npx prisma migrate deploy
          
  # Deploy to Railway
  deploy-railway:
    runs-on: ubuntu-latest
    needs: [build-images, migrate-database]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Railway CLI
        run: npm install -g @railway/cli
        
      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway up --service auth-api
          railway up --service msme-api
          railway up --service valuation-api
          
  # Deploy to Render
  deploy-render:
    runs-on: ubuntu-latest
    needs: [build-images, migrate-database]
    if: github.ref == 'refs/heads/release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          curl -X POST \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
            -H "Authorization: Bearer ${{ env.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": false}'

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [deploy-railway, deploy-render]
    if: always() && (needs.deploy-railway.result == 'success' || needs.deploy-render.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
      - name: Run performance tests
        run: |
          k6 run --vus 10 --duration 30s scripts/performance-test.js
          
      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://vyapaarmitra.in
            https://admin.vyapaarmitra.in
          configPath: ./.lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Post-deployment Health Checks
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-railway, deploy-render]
    if: always() && (needs.deploy-railway.result == 'success' || needs.deploy-render.result == 'success')
    
    steps:
      - name: Wait for deployment
        run: sleep 60
        
      - name: Health check - Main website
        run: |
          curl -f https://vyapaarmitra.in/api/health || exit 1
          
      - name: Health check - Admin dashboard
        run: |
          curl -f https://admin.vyapaarmitra.in/api/health || exit 1
          
      - name: Health check - API
        run: |
          curl -f https://api.vyapaarmitra.in/health || exit 1
          
      - name: Verify metrics endpoints
        run: |
          curl -f https://api.vyapaarmitra.in/metrics || exit 1

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [health-check, performance-test]
    if: always()
    
    steps:
      - name: Notify Slack on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '✅ VyapaarMitra deployed successfully to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: '❌ VyapaarMitra deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Send email notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: 'VyapaarMitra Deployment Failed'
          body: |
            The VyapaarMitra deployment has failed.
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            
            Please check the GitHub Actions logs for more details.
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: 'VyapaarMitra CI/CD <noreply@vyapaarmitra.in>'