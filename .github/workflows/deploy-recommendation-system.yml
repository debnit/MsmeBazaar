name: Deploy Recommendation System

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'microservices/recommendation-service/**'
      - 'microservices/ml-monitoring-service/**'
      - 'microservices/transaction-matching-service/**'
      - 'infrastructure/database/**'
      - 'frontend/src/components/RecommendationEngine.tsx'
      - 'frontend/src/components/TransactionMatching.tsx'
      - '.github/workflows/deploy-recommendation-system.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'microservices/recommendation-service/**'
      - 'microservices/ml-monitoring-service/**'
      - 'microservices/transaction-matching-service/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_rebuild:
        description: 'Force rebuild all images'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  POSTGRES_DB: msmebazaar
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_msmebazaar
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio httpx
        
        # Install recommendation service dependencies
        if [ -f microservices/recommendation-service/requirements.txt ]; then
          pip install -r microservices/recommendation-service/requirements.txt
        fi
        
        # Install ML monitoring service dependencies
        if [ -f microservices/ml-monitoring-service/requirements.txt ]; then
          pip install -r microservices/ml-monitoring-service/requirements.txt
        fi
        
        # Install transaction matching service dependencies
        if [ -f microservices/transaction-matching-service/requirements.txt ]; then
          pip install -r microservices/transaction-matching-service/requirements.txt
        fi

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Setup test database
      run: |
        export PGPASSWORD=postgres
        psql -h localhost -U postgres -d test_msmebazaar -f infrastructure/database/transaction_matching_schema.sql
        psql -h localhost -U postgres -d test_msmebazaar -f infrastructure/database/user_feedback_schema.sql

    - name: Run Python tests
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: test_msmebazaar
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        # Test recommendation service
        if [ -d "microservices/recommendation-service" ]; then
          cd microservices/recommendation-service
          python -m pytest tests/ -v --cov=app --cov-report=xml || echo "No tests found for recommendation service"
          cd ../..
        fi
        
        # Test ML monitoring service
        if [ -d "microservices/ml-monitoring-service" ]; then
          cd microservices/ml-monitoring-service
          python -m pytest tests/ -v --cov=app --cov-report=xml || echo "No tests found for ML monitoring service"
          cd ../..
        fi
        
        # Test transaction matching service
        if [ -d "microservices/transaction-matching-service" ]; then
          cd microservices/transaction-matching-service
          python -m pytest tests/ -v --cov=app --cov-report=xml || echo "No tests found for transaction matching service"
          cd ../..
        fi

    - name: Run Frontend tests
      run: |
        cd frontend
        npm run test:ci || echo "No frontend tests configured yet"

    - name: Lint code
      run: |
        # Python linting
        pip install flake8 black isort
        find . -name "*.py" -path "*/microservices/*" | xargs flake8 --max-line-length=120 --ignore=E203,W503 || true
        
        # TypeScript linting
        cd frontend
        npm run lint || echo "Frontend linting not configured"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name != 'pull_request'
    outputs:
      recommendation-service-image: ${{ steps.meta.outputs.recommendation-service-image }}
      ml-monitoring-service-image: ${{ steps.meta.outputs.ml-monitoring-service-image }}
      transaction-matching-service-image: ${{ steps.meta.outputs.transaction-matching-service-image }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      run: |
        echo "recommendation-service-image=${{ env.REGISTRY }}/${{ github.repository }}/recommendation-service:${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "ml-monitoring-service-image=${{ env.REGISTRY }}/${{ github.repository }}/ml-monitoring-service:${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "transaction-matching-service-image=${{ env.REGISTRY }}/${{ github.repository }}/transaction-matching-service:${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Create requirements files if missing
      run: |
        # Create requirements.txt files
        mkdir -p microservices/recommendation-service
        cat > microservices/recommendation-service/requirements.txt << 'EOF'
        fastapi==0.104.1
        uvicorn[standard]==0.24.0
        redis==5.0.1
        asyncpg==0.29.0
        scikit-learn==1.3.2
        pandas==2.1.4
        numpy==1.24.4
        scipy==1.11.4
        implicit==0.7.2
        pydantic==2.5.0
        prometheus-client==0.19.0
        joblib==1.3.2
        geopy==2.4.1
        python-multipart==0.0.6
        psycopg2-binary==2.9.9
        sqlalchemy==2.0.23
        celery==5.3.4
        flower==2.0.1
        EOF
        
        mkdir -p microservices/ml-monitoring-service
        cat > microservices/ml-monitoring-service/requirements.txt << 'EOF'
        mlflow==2.8.1
        fastapi==0.104.1
        uvicorn[standard]==0.24.0
        redis==5.0.1
        asyncpg==0.29.0
        scikit-learn==1.3.2
        pandas==2.1.4
        numpy==1.24.4
        prometheus-client==0.19.0
        celery==5.3.4
        flower==2.0.1
        tensorboard==2.15.1
        psycopg2-binary==2.9.9
        sqlalchemy==2.0.23
        alembic==1.13.0
        pydantic==2.5.0
        boto3==1.34.0
        EOF
        
        mkdir -p microservices/transaction-matching-service
        cat > microservices/transaction-matching-service/requirements.txt << 'EOF'
        fastapi==0.104.1
        uvicorn[standard]==0.24.0
        redis==5.0.1
        asyncpg==0.29.0
        scikit-learn==1.3.2
        pandas==2.1.4
        numpy==1.24.4
        scipy==1.11.4
        pydantic==2.5.0
        prometheus-client==0.19.0
        geopy==2.4.1
        joblib==1.3.2
        psycopg2-binary==2.9.9
        sqlalchemy==2.0.23
        EOF

    - name: Create Dockerfiles
      run: |
        # Recommendation Service Dockerfile
        cat > microservices/recommendation-service/Dockerfile << 'EOF'
        FROM python:3.9-slim
        
        WORKDIR /app
        
        RUN apt-get update && apt-get install -y \
            gcc g++ libpq-dev curl \
            && rm -rf /var/lib/apt/lists/*
        
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        COPY . .
        
        EXPOSE 8004
        
        HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
            CMD curl -f http://localhost:8004/api/recommendation_stats || exit 1
        
        CMD ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8004", "--workers", "4"]
        EOF
        
        # ML Monitoring Service Dockerfile
        cat > microservices/ml-monitoring-service/Dockerfile << 'EOF'
        FROM python:3.9-slim
        
        WORKDIR /app
        
        RUN apt-get update && apt-get install -y \
            gcc g++ libpq-dev curl \
            && rm -rf /var/lib/apt/lists/*
        
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        COPY . .
        RUN mkdir -p /app/models
        
        EXPOSE 8005
        
        HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
            CMD curl -f http://localhost:8005/api/models/status || exit 1
        
        CMD ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8005", "--workers", "2"]
        EOF
        
        # Transaction Matching Service Dockerfile
        cat > microservices/transaction-matching-service/Dockerfile << 'EOF'
        FROM python:3.9-slim
        
        WORKDIR /app
        
        RUN apt-get update && apt-get install -y \
            gcc g++ libpq-dev curl \
            && rm -rf /var/lib/apt/lists/*
        
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        COPY . .
        
        EXPOSE 8008
        
        HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
            CMD curl -f http://localhost:8008/api/matching_stats || exit 1
        
        CMD ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8008", "--workers", "2"]
        EOF

    - name: Build and push Recommendation Service
      uses: docker/build-push-action@v5
      with:
        context: ./microservices/recommendation-service
        push: true
        tags: ${{ steps.meta.outputs.recommendation-service-image }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push ML Monitoring Service
      uses: docker/build-push-action@v5
      with:
        context: ./microservices/ml-monitoring-service
        push: true
        tags: ${{ steps.meta.outputs.ml-monitoring-service-image }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push Transaction Matching Service
      uses: docker/build-push-action@v5
      with:
        context: ./microservices/transaction-matching-service
        push: true
        tags: ${{ steps.meta.outputs.transaction-matching-service-image }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: 
      name: staging
      url: https://staging.msmebazaar.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Deploy to Staging Kubernetes
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_STAGING }}
        RECOMMENDATION_SERVICE_IMAGE: ${{ needs.build.outputs.recommendation-service-image }}
        ML_MONITORING_SERVICE_IMAGE: ${{ needs.build.outputs.ml-monitoring-service-image }}
        TRANSACTION_MATCHING_SERVICE_IMAGE: ${{ needs.build.outputs.transaction-matching-service-image }}
      run: |
        echo "$KUBE_CONFIG" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Apply Kubernetes manifests
        envsubst < k8s/staging/recommendation-service.yaml | kubectl apply -f -
        envsubst < k8s/staging/ml-monitoring-service.yaml | kubectl apply -f -
        envsubst < k8s/staging/transaction-matching-service.yaml | kubectl apply -f -
        
        # Wait for rollout
        kubectl rollout status deployment/recommendation-service -n msmebazaar-staging --timeout=300s
        kubectl rollout status deployment/ml-monitoring-service -n msmebazaar-staging --timeout=300s
        kubectl rollout status deployment/transaction-matching-service -n msmebazaar-staging --timeout=300s

    - name: Run Database Migrations
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_STAGING }}
        POSTGRES_HOST: ${{ secrets.STAGING_POSTGRES_HOST }}
        POSTGRES_PASSWORD: ${{ secrets.STAGING_POSTGRES_PASSWORD }}
      run: |
        echo "$KUBE_CONFIG" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Run database migrations
        kubectl create job --from=cronjob/db-migration db-migration-$(date +%s) -n msmebazaar-staging || true

    - name: Run Health Checks
      run: |
        # Wait for services to be ready
        sleep 60
        
        # Health check URLs (adjust based on your staging environment)
        curl -f https://staging-api.msmebazaar.com/api/recommendation_stats || exit 1
        curl -f https://staging-api.msmebazaar.com/api/models/status || exit 1
        curl -f https://staging-api.msmebazaar.com/api/matching_stats || exit 1

    - name: Run Integration Tests
      run: |
        # Run integration tests against staging
        python -m pytest tests/integration/ -v --staging || echo "Integration tests not configured"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: 
      name: production
      url: https://msmebazaar.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Deploy to Production Kubernetes
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
        RECOMMENDATION_SERVICE_IMAGE: ${{ needs.build.outputs.recommendation-service-image }}
        ML_MONITORING_SERVICE_IMAGE: ${{ needs.build.outputs.ml-monitoring-service-image }}
        TRANSACTION_MATCHING_SERVICE_IMAGE: ${{ needs.build.outputs.transaction-matching-service-image }}
      run: |
        echo "$KUBE_CONFIG" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Apply Kubernetes manifests with rolling update strategy
        envsubst < k8s/production/recommendation-service.yaml | kubectl apply -f -
        envsubst < k8s/production/ml-monitoring-service.yaml | kubectl apply -f -
        envsubst < k8s/production/transaction-matching-service.yaml | kubectl apply -f -
        
        # Wait for rollout
        kubectl rollout status deployment/recommendation-service -n msmebazaar-prod --timeout=600s
        kubectl rollout status deployment/ml-monitoring-service -n msmebazaar-prod --timeout=600s
        kubectl rollout status deployment/transaction-matching-service -n msmebazaar-prod --timeout=600s

    - name: Run Database Migrations
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
        POSTGRES_HOST: ${{ secrets.PRODUCTION_POSTGRES_HOST }}
        POSTGRES_PASSWORD: ${{ secrets.PRODUCTION_POSTGRES_PASSWORD }}
      run: |
        echo "$KUBE_CONFIG" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Run database migrations with backup
        kubectl create job --from=cronjob/db-migration-with-backup db-migration-$(date +%s) -n msmebazaar-prod

    - name: Run Production Health Checks
      run: |
        # Wait for services to be ready
        sleep 90
        
        # Comprehensive health checks
        curl -f https://api.msmebazaar.com/api/recommendation_stats || exit 1
        curl -f https://api.msmebazaar.com/api/models/status || exit 1
        curl -f https://api.msmebazaar.com/api/matching_stats || exit 1
        
        # Check metrics endpoints
        curl -f https://api.msmebazaar.com/metrics || exit 1

    - name: Run Smoke Tests
      run: |
        # Run smoke tests against production
        python -m pytest tests/smoke/ -v --production || echo "Smoke tests not configured"

    - name: Notify Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'Recommendation System deployed successfully to production! 🚀'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: Notify Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'Recommendation System deployment to production failed! ❌'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
    - name: Cleanup old images
      run: |
        # Keep only last 5 versions of each image
        echo "Cleanup would be performed here in real deployment"