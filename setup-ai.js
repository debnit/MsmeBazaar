#!/usr/bin/env node

/**
 * 🤖 MSMEBazaar AI Services Setup Script
 * 
 * This script helps you configure OpenAI and Pinecone API keys
 * for the AI-powered features in MSMEBazaar.
 */

import fs from 'fs';
import path from 'path';
import { createInterface } from 'readline';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
};

const rl = createInterface({
  input: process.stdin,
  output: process.stdout,
});

function colorize(text, color) {
  return `${colors[color]}${text}${colors.reset}`;
}

function question(query) {
  return new Promise((resolve) => rl.question(query, resolve));
}

async function main() {
  console.log(colorize('\n🤖 MSMEBazaar AI Services Setup', 'cyan'));
  console.log(colorize('=====================================\n', 'cyan'));

  console.log('This script will help you configure OpenAI and Pinecone API keys.');
  console.log('You can skip any service by pressing Enter without typing anything.\n');

  // Check if .env file exists
  const envPath = path.join(__dirname, '.env');
  const envExamplePath = path.join(__dirname, '.env.example');
  
  let envContent = '';
  
  if (fs.existsSync(envPath)) {
    console.log(colorize('✅ Found existing .env file', 'green'));
    envContent = fs.readFileSync(envPath, 'utf8');
  } else if (fs.existsSync(envExamplePath)) {
    console.log(colorize('📋 Creating .env from .env.example', 'yellow'));
    envContent = fs.readFileSync(envExamplePath, 'utf8');
  } else {
    console.log(colorize('📝 Creating new .env file', 'yellow'));
    envContent = `# MSMEBazaar Environment Configuration
# Generated by setup-ai.js

NODE_ENV=development
PORT=5000

`;
  }

  console.log('\n' + colorize('1️⃣  OpenAI Configuration', 'blue'));
  console.log('OpenAI powers business valuation, smart assistant, and document analysis.');
  console.log('Get your API key from: https://platform.openai.com/api-keys\n');

  const openaiKey = await question(colorize('Enter your OpenAI API key (sk-...): ', 'yellow'));
  
  if (openaiKey && openaiKey.trim()) {
    if (openaiKey.startsWith('sk-')) {
      console.log(colorize('✅ OpenAI API key looks valid', 'green'));
      envContent = updateEnvVariable(envContent, 'OPENAI_API_KEY', openaiKey.trim());
    } else {
      console.log(colorize('⚠️  Warning: OpenAI API key should start with "sk-"', 'yellow'));
      envContent = updateEnvVariable(envContent, 'OPENAI_API_KEY', openaiKey.trim());
    }
  } else {
    console.log(colorize('⏭️  Skipping OpenAI configuration', 'yellow'));
  }

  console.log('\n' + colorize('2️⃣  Pinecone Configuration', 'blue'));
  console.log('Pinecone provides vector database for semantic search and matching.');
  console.log('Get your API key from: https://app.pinecone.io/\n');

  const pineconeKey = await question(colorize('Enter your Pinecone API key: ', 'yellow'));
  
  if (pineconeKey && pineconeKey.trim()) {
    console.log(colorize('✅ Pinecone API key added', 'green'));
    envContent = updateEnvVariable(envContent, 'PINECONE_API_KEY', pineconeKey.trim());

    const pineconeEnv = await question(colorize('Enter your Pinecone environment (e.g., us-east1-gcp): ', 'yellow'));
    if (pineconeEnv && pineconeEnv.trim()) {
      envContent = updateEnvVariable(envContent, 'PINECONE_ENVIRONMENT', pineconeEnv.trim());
    } else {
      envContent = updateEnvVariable(envContent, 'PINECONE_ENVIRONMENT', 'us-east1-gcp');
    }

    const indexName = await question(colorize('Enter your Pinecone index name [msmebazaar-vectors]: ', 'yellow'));
    envContent = updateEnvVariable(envContent, 'PINECONE_INDEX_NAME', indexName.trim() || 'msmebazaar-vectors');
  } else {
    console.log(colorize('⏭️  Skipping Pinecone configuration', 'yellow'));
  }

  // Add AI model configuration
  console.log('\n' + colorize('3️⃣  AI Model Configuration', 'blue'));
  
  const isProduction = await question(colorize('Is this for production? (y/N): ', 'yellow'));
  const isProd = isProduction.toLowerCase().startsWith('y');

  if (isProd) {
    envContent = updateEnvVariable(envContent, 'OPENAI_MODEL', 'gpt-4-turbo-preview');
    envContent = updateEnvVariable(envContent, 'NODE_ENV', 'production');
    console.log(colorize('✅ Configured for production (GPT-4)', 'green'));
  } else {
    envContent = updateEnvVariable(envContent, 'OPENAI_MODEL', 'gpt-3.5-turbo');
    envContent = updateEnvVariable(envContent, 'NODE_ENV', 'development');
    console.log(colorize('✅ Configured for development (GPT-3.5)', 'green'));
  }

  // Write the .env file
  fs.writeFileSync(envPath, envContent);
  console.log('\n' + colorize('✅ Configuration saved to .env', 'green'));

  // Test the configuration
  console.log('\n' + colorize('4️⃣  Testing Configuration', 'blue'));
  
  try {
    await testConfiguration(envPath);
  } catch (error) {
    console.log(colorize('⚠️  Configuration test failed:', 'yellow'), error.message);
  }

  // Show next steps
  console.log('\n' + colorize('🎉 Setup Complete!', 'green'));
  console.log('\nNext steps:');
  console.log('1. Start your application: ' + colorize('npm start', 'cyan'));
  console.log('2. Check logs for AI service initialization');
  console.log('3. Test AI features in the dashboard');
  console.log('4. Monitor API usage and costs');
  
  console.log('\n📚 For detailed setup guide, see: ' + colorize('AI_SETUP_GUIDE.md', 'cyan'));
  
  rl.close();
}

function updateEnvVariable(envContent, key, value) {
  const regex = new RegExp(`^${key}=.*$`, 'm');
  const newLine = `${key}=${value}`;
  
  if (regex.test(envContent)) {
    return envContent.replace(regex, newLine);
  } else {
    // Add to AI services section or create it
    const aiSectionRegex = /# ================================\s*\n# 🤖 AI & ML SERVICES\s*\n# ================================/;
    
    if (aiSectionRegex.test(envContent)) {
      return envContent.replace(
        aiSectionRegex,
        `# ================================
# 🤖 AI & ML SERVICES
# ================================
${newLine}`
      );
    } else {
      // Add AI section at the end
      return envContent + `
# ================================
# 🤖 AI & ML SERVICES
# ================================
${newLine}
`;
    }
  }
}

async function testConfiguration(envPath) {
  console.log('Testing API key formats...');
  
  const envContent = fs.readFileSync(envPath, 'utf8');
  const envVars = {};
  
  envContent.split('\n').forEach(line => {
    const match = line.match(/^([^#][^=]*)=(.*)$/);
    if (match) {
      envVars[match[1]] = match[2];
    }
  });

  if (envVars.OPENAI_API_KEY) {
    if (envVars.OPENAI_API_KEY.startsWith('sk-')) {
      console.log(colorize('✅ OpenAI API key format is correct', 'green'));
    } else {
      console.log(colorize('⚠️  OpenAI API key format may be incorrect', 'yellow'));
    }
  }

  if (envVars.PINECONE_API_KEY) {
    console.log(colorize('✅ Pinecone API key is configured', 'green'));
  }

  if (envVars.PINECONE_ENVIRONMENT) {
    console.log(colorize('✅ Pinecone environment is configured', 'green'));
  }

  console.log(colorize('✅ Basic configuration test passed', 'green'));
}

// Handle errors
process.on('SIGINT', () => {
  console.log(colorize('\n\n👋 Setup cancelled by user', 'yellow'));
  rl.close();
  process.exit(0);
});

// Run the script
main().catch(error => {
  console.error(colorize('\n❌ Setup failed:', 'red'), error.message);
  rl.close();
  process.exit(1);
});