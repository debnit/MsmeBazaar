[build]
builder = "NIXPACKS"
buildCommand = "echo 'Building MSMEBazaar Recommendation System'"

[deploy]
numReplicas = 1
sleepApplication = false
restartPolicyType = "ON_FAILURE"

# Environment variables for all services
[env]
NODE_ENV = "production"
ENVIRONMENT = "production"
PYTHONPATH = "/app"

# Database configuration (will be set by Railway PostgreSQL addon)
DATABASE_URL = { $ref = "DATABASE_URL" }
POSTGRES_HOST = { $ref = "PGHOST" }
POSTGRES_PORT = { $ref = "PGPORT" }
POSTGRES_DB = { $ref = "PGDATABASE" }
POSTGRES_USER = { $ref = "PGUSER" }
POSTGRES_PASSWORD = { $ref = "PGPASSWORD" }

# Redis configuration (will be set by Railway Redis addon)
REDIS_URL = { $ref = "REDIS_URL" }
REDIS_HOST = { $ref = "REDIS_HOST" }
REDIS_PORT = { $ref = "REDIS_PORT" }
REDIS_PASSWORD = { $ref = "REDIS_PASSWORD" }

# MLflow configuration
MLFLOW_TRACKING_URI = "https://mlflow-server-production.up.railway.app"

# Celery configuration
CELERY_BROKER_URL = { $ref = "REDIS_URL" }
CELERY_RESULT_BACKEND = { $ref = "REDIS_URL" }

# Service-specific ports
PORT = { $ref = "PORT" }

[services]

# Recommendation Service
[services.recommendation-service]
source = "microservices/recommendation-service"
build.buildCommand = "pip install -r requirements.txt"
build.startCommand = "uvicorn app:app --host 0.0.0.0 --port $PORT --workers 4"
healthcheckPath = "/api/recommendation_stats"
healthcheckTimeout = 30

[services.recommendation-service.env]
SERVICE_NAME = "recommendation-service"
SERVICE_PORT = "8004"

# ML Monitoring Service
[services.ml-monitoring-service]
source = "microservices/ml-monitoring-service"
build.buildCommand = "pip install -r requirements.txt"
build.startCommand = "uvicorn app:app --host 0.0.0.0 --port $PORT --workers 2"
healthcheckPath = "/api/models/status"
healthcheckTimeout = 30

[services.ml-monitoring-service.env]
SERVICE_NAME = "ml-monitoring-service"
SERVICE_PORT = "8005"

# Transaction Matching Service
[services.transaction-matching-service]
source = "microservices/transaction-matching-service"
build.buildCommand = "pip install -r requirements.txt"
build.startCommand = "uvicorn app:app --host 0.0.0.0 --port $PORT --workers 2"
healthcheckPath = "/api/matching_stats"
healthcheckTimeout = 30

[services.transaction-matching-service.env]
SERVICE_NAME = "transaction-matching-service"
SERVICE_PORT = "8008"

# MLflow Server
[services.mlflow-server]
build.buildCommand = "pip install mlflow psycopg2-binary boto3"
build.startCommand = "mlflow server --host 0.0.0.0 --port $PORT --backend-store-uri $DATABASE_URL --default-artifact-root s3://msmebazaar-mlflow-artifacts"
healthcheckPath = "/"
healthcheckTimeout = 30

[services.mlflow-server.env]
SERVICE_NAME = "mlflow-server"
SERVICE_PORT = "5000"

# Celery Worker
[services.celery-worker]
source = "microservices/ml-monitoring-service"
build.buildCommand = "pip install -r requirements.txt"
build.startCommand = "celery -A app.celery worker --loglevel=info --concurrency=2"

[services.celery-worker.env]
SERVICE_NAME = "celery-worker"
C_FORCE_ROOT = "1"

# Celery Beat Scheduler
[services.celery-beat]
source = "microservices/ml-monitoring-service"
build.buildCommand = "pip install -r requirements.txt"
build.startCommand = "celery -A app.celery beat --loglevel=info"

[services.celery-beat.env]
SERVICE_NAME = "celery-beat"
C_FORCE_ROOT = "1"

# Frontend
[services.frontend]
source = "frontend"
build.buildCommand = "npm ci && npm run build"
build.startCommand = "npx serve -s build -l $PORT"

[services.frontend.env]
SERVICE_NAME = "frontend"
REACT_APP_API_URL = "https://recommendation-service-production.up.railway.app"
REACT_APP_ML_MONITORING_URL = "https://ml-monitoring-service-production.up.railway.app"
REACT_APP_TRANSACTION_MATCHING_URL = "https://transaction-matching-service-production.up.railway.app"
REACT_APP_MLFLOW_URL = "https://mlflow-server-production.up.railway.app"
REACT_APP_ENVIRONMENT = "production"

# Monitoring and Observability
[services.prometheus]
build.buildCommand = "echo 'Prometheus setup'"
build.startCommand = "prometheus --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus --web.console.libraries=/etc/prometheus/console_libraries --web.console.templates=/etc/prometheus/consoles --web.enable-lifecycle --web.listen-address=0.0.0.0:$PORT"

[services.prometheus.env]
SERVICE_NAME = "prometheus"

[services.grafana]
build.buildCommand = "echo 'Grafana setup'"
build.startCommand = "grafana-server --config=/etc/grafana/grafana.ini --homepath=/usr/share/grafana"

[services.grafana.env]
SERVICE_NAME = "grafana"
GF_SERVER_HTTP_PORT = { $ref = "PORT" }
GF_SECURITY_ADMIN_PASSWORD = "admin123"

# Development tools
[develop]
command = "echo 'Development mode for MSMEBazaar Recommendation System'"

# Deployment configuration
[deployment]
domain = "msmebazaar.railway.app"