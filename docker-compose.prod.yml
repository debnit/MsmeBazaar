version: '3.8'

services:
  # Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/cache:/var/cache/nginx
    depends_on:
      - client
      - api-gateway
    restart: unless-stopped
    networks:
      - frontend
      - backend

  # Frontend Application
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://api.msmebazaar.com
      - VITE_SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./client/dist:/usr/share/nginx/html:ro
    restart: unless-stopped
    networks:
      - frontend

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - backend
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Valuation Microservice
  valuation-service:
    build:
      context: ./microservices/valuation-service
      dockerfile: Dockerfile
    environment:
      - PORT=8001
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${REDIS_URL}/0
      - CELERY_RESULT_BACKEND=${REDIS_URL}/0
      - AUTH_SERVICE_URL=http://api-gateway:8000
      - GAMIFICATION_SERVICE_URL=http://gamification-service:8003
    depends_on:
      - postgres
      - redis
      - celery-worker
    restart: unless-stopped
    networks:
      - backend
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1GB
        reservations:
          memory: 512M

  # Gamification Microservice
  gamification-service:
    build:
      context: ./microservices/gamification-service
      dockerfile: Dockerfile
    environment:
      - PORT=8003
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - AUTH_SERVICE_URL=http://api-gateway:8000
      - NOTIFICATION_SERVICE_URL=http://notification-service:8004
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - backend
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Notification Microservice
  notification-service:
    build:
      context: ./microservices/notification-service
      dockerfile: Dockerfile
    environment:
      - PORT=8004
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - FIREBASE_CREDENTIALS=${FIREBASE_CREDENTIALS}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - backend
    deploy:
      replicas: 2

  # Analytics Microservice
  analytics-service:
    build:
      context: ./microservices/analytics-service
      dockerfile: Dockerfile
    environment:
      - PORT=8005
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CLICKHOUSE_URL=${CLICKHOUSE_URL}
    depends_on:
      - postgres
      - redis
      - clickhouse
    restart: unless-stopped
    networks:
      - backend
    deploy:
      replicas: 2

  # Celery Workers for Async Processing
  celery-worker:
    build:
      context: ./microservices/valuation-service
      dockerfile: Dockerfile
    command: celery -A app.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${REDIS_URL}/0
      - CELERY_RESULT_BACKEND=${REDIS_URL}/0
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - backend
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1GB
        reservations:
          memory: 512M

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./microservices/valuation-service
      dockerfile: Dockerfile
    command: celery -A app.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${REDIS_URL}/0
      - CELERY_RESULT_BACKEND=${REDIS_URL}/0
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - backend

  # Celery Flower (Monitoring)
  celery-flower:
    build:
      context: ./microservices/valuation-service
      dockerfile: Dockerfile
    command: celery -A app.celery_app flower --port=5555
    environment:
      - CELERY_BROKER_URL=${REDIS_URL}/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - backend

  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 2GB
        reservations:
          memory: 1GB

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ClickHouse for Analytics
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    environment:
      - CLICKHOUSE_DB=${CLICKHOUSE_DB}
      - CLICKHOUSE_USER=${CLICKHOUSE_USER}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    restart: unless-stopped
    networks:
      - backend

  # ElasticSearch for Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 2GB
        reservations:
          memory: 1GB

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - backend

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - backend

  # Log Management - Loki
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki:/etc/loki:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - backend

  # Log Collection - Promtail
  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail:/etc/promtail:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    restart: unless-stopped
    networks:
      - backend

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    restart: unless-stopped
    networks:
      - backend

  # MinIO for File Storage
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    restart: unless-stopped
    networks:
      - backend

  # Backup Service
  backup:
    image: alpine:latest
    command: |
      sh -c "
        apk add --no-cache postgresql-client aws-cli
        while true; do
          pg_dump $${DATABASE_URL} | gzip > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql.gz
          aws s3 cp /backups/ s3://$${BACKUP_BUCKET}/ --recursive
          find /backups -name '*.sql.gz' -mtime +7 -delete
          sleep 86400
        done
      "
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - BACKUP_BUCKET=${BACKUP_BUCKET}
    volumes:
      - backup_data:/backups
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - backend

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  clickhouse_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  minio_data:
    driver: local
  backup_data:
    driver: local

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge