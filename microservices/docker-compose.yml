version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: msme_platform
      POSTGRES_USER: msme_user
      POSTGRES_PASSWORD: msme_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U msme_user -d msme_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: elasticsearch:8.10.2
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx1024m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # API Gateway (Nginx)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - auth-service
      - user-profile-service
      - msme-listing-service
      - search-matchmaking-service
      - valuation-engine
      - eaas-service
      - agent-service
      - escrow-payments-service
      - notification-service
      - audit-compliance-service
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Microservices
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://msme_user:msme_password@postgres:5432/msme_platform
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  user-profile-service:
    build:
      context: ./user-profile-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://msme_user:msme_password@postgres:5432/msme_platform
      - AUTH_SERVICE_URL=http://auth-service:8001
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-msme-documents}
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  msme-listing-service:
    build:
      context: ./msme-listing-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://msme_user:msme_password@postgres:5432/msme_platform
      - AUTH_SERVICE_URL=http://auth-service:8001
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-msme-listings}
    ports:
      - "8003:8003"
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  search-matchmaking-service:
    build:
      context: ./search-matchmaking-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://msme_user:msme_password@postgres:5432/msme_platform
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - AUTH_SERVICE_URL=http://auth-service:8001
      - LISTING_SERVICE_URL=http://msme-listing-service:8003
    ports:
      - "8004:8004"
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  valuation-engine:
    build:
      context: ./valuation-engine
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://msme_user:msme_password@postgres:5432/msme_platform
      - AUTH_SERVICE_URL=http://auth-service:8001
      - LISTING_SERVICE_URL=http://msme-listing-service:8003
      - MODEL_PATH=/models
    ports:
      - "8005:8005"
    volumes:
      - valuation_models:/models
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  eaas-service:
    build:
      context: ./eaas-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://msme_user:msme_password@postgres:5432/msme_platform
      - AUTH_SERVICE_URL=http://auth-service:8001
      - DOCUSIGN_INTEGRATION_KEY=${DOCUSIGN_INTEGRATION_KEY}
      - DOCUSIGN_USER_ID=${DOCUSIGN_USER_ID}
      - DOCUSIGN_ACCOUNT_ID=${DOCUSIGN_ACCOUNT_ID}
      - DOCUSIGN_PRIVATE_KEY=${DOCUSIGN_PRIVATE_KEY}
      - DOCUSIGN_BASE_URL=${DOCUSIGN_BASE_URL:-https://demo.docusign.net/restapi}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    ports:
      - "8006:8006"
    volumes:
      - eaas_templates:/app/templates
      - eaas_documents:/app/documents
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  agent-service:
    build:
      context: ./agent-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://msme_user:msme_password@postgres:5432/msme_platform
      - AUTH_SERVICE_URL=http://auth-service:8001
      - LISTING_SERVICE_URL=http://msme-listing-service:8003
    ports:
      - "8007:8007"
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  escrow-payments-service:
    build:
      context: ./escrow-payments-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://msme_user:msme_password@postgres:5432/msme_platform
      - AUTH_SERVICE_URL=http://auth-service:8001
      - RAZORPAY_KEY_ID=${RAZORPAY_KEY_ID}
      - RAZORPAY_KEY_SECRET=${RAZORPAY_KEY_SECRET}
      - SETU_CLIENT_ID=${SETU_CLIENT_ID}
      - SETU_CLIENT_SECRET=${SETU_CLIENT_SECRET}
    ports:
      - "8008:8008"
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://msme_user:msme_password@postgres:5432/msme_platform
      - REDIS_URL=redis://redis:6379
      - AUTH_SERVICE_URL=http://auth-service:8001
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - MSG91_API_KEY=${MSG91_API_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    ports:
      - "8009:8009"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  audit-compliance-service:
    build:
      context: ./audit-compliance-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://msme_user:msme_password@postgres:5432/msme_platform
      - AUTH_SERVICE_URL=http://auth-service:8001
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    ports:
      - "8010:8010"
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Monitoring and Observability
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

  # Message Queue
  celery-worker:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    command: celery -A app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://msme_user:msme_password@postgres:5432/msme_platform
      - REDIS_URL=redis://redis:6379
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - MSG91_API_KEY=${MSG91_API_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  celery-beat:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    command: celery -A app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://msme_user:msme_password@postgres:5432/msme_platform
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  valuation_models:
  grafana_data:
  eaas_templates:
  eaas_documents:

networks:
  default:
    name: msme-network
    driver: bridge