version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: msmebazaar-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: msmebazaar_admin
      POSTGRES_USER: msmebazaar
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U msmebazaar -d msmebazaar_admin"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - msmebazaar-network

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: msmebazaar-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-dev_redis_password} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - msmebazaar-network

  # FastAPI Backend
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: msmebazaar-api
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://msmebazaar:${POSTGRES_PASSWORD:-dev_password}@postgres:5432/msmebazaar_admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev_redis_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-dev_secret_key_change_in_production}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-ap-south-1}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,https://localhost:3000}
    volumes:
      - ./apps/api:/app
      - api_uploads:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - msmebazaar-network

  # Celery Worker for Background Tasks
  worker:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: msmebazaar-worker
    restart: unless-stopped
    command: celery -A core.celery worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://msmebazaar:${POSTGRES_PASSWORD:-dev_password}@postgres:5432/msmebazaar_admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev_redis_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-dev_secret_key_change_in_production}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-ap-south-1}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    volumes:
      - ./apps/api:/app
      - api_uploads:/app/uploads
    depends_on:
      - postgres
      - redis
      - api
    networks:
      - msmebazaar-network

  # Celery Beat for Scheduled Tasks
  beat:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: msmebazaar-beat
    restart: unless-stopped
    command: celery -A core.celery beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DATABASE_URL=postgresql://msmebazaar:${POSTGRES_PASSWORD:-dev_password}@postgres:5432/msmebazaar_admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev_redis_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-dev_secret_key_change_in_production}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    volumes:
      - ./apps/api:/app
    depends_on:
      - postgres
      - redis
      - api
    networks:
      - msmebazaar-network

  # Next.js Frontend
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: msmebazaar-web
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
      - NEXT_PUBLIC_ENVIRONMENT=${ENVIRONMENT:-development}
    ports:
      - "3000:3000"
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - msmebazaar-network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: msmebazaar-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
      - api
    networks:
      - msmebazaar-network
    profiles:
      - production

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: msmebazaar-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - msmebazaar-network
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: msmebazaar-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - msmebazaar-network
    profiles:
      - monitoring

  # Elasticsearch for Logging (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: msmebazaar-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - msmebazaar-network
    profiles:
      - logging

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: msmebazaar-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - msmebazaar-network
    profiles:
      - logging

  # pgAdmin for Database Management (Development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: msmebazaar-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@msmebazaar.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - msmebazaar-network
    profiles:
      - development

  # Redis Commander for Redis Management (Development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: msmebazaar-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-dev_redis_password}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - msmebazaar-network
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_uploads:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  msmebazaar-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16