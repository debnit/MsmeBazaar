Build a Replit-compatible but fully Replit-independent monorepo full-stack web app named MSMEAtlas, for a marketplace that connects buyers, sellers, and agents of MSMEs. It should be scalable and portable to Render, Railway, or localhost.

Tech Stack:
Frontend: React (with Vite or Create React App), Tailwind CSS

Backend: Node.js + Express

Database: PostgreSQL

Authentication: Email/phone + password (mock), but add comments where Replit Auth can be used optionally

Folder Structure:
pgsql
Copy
Edit
msm eatlas/
â”œâ”€â”€ backend/
â”‚   â”œâ”€â”€ index.js                  # Express entrypoint
â”‚   â”œâ”€â”€ routes/                   # Routes for auth, seller, buyer, agent
â”‚   â”œâ”€â”€ controllers/
â”‚   â”œâ”€â”€ models/                   # PostgreSQL schemas (use pg or sequelize)
â”‚   â”œâ”€â”€ services/                 # Mock ML valuation and matchmaking
â”‚   â””â”€â”€ config/                   # .env loader, DB connection
â”œâ”€â”€ frontend/
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ pages/                # Login, Dashboard, Buyer, Seller views
â”‚   â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â””â”€â”€ services/             # Axios API wrapper
â”‚   â””â”€â”€ tailwind.config.js
â”œâ”€â”€ docker-compose.yml           # Optional: backend + Postgres dev setup
â”œâ”€â”€ .env.example
â”œâ”€â”€ README.md                    # Include Replit + local setup instructions
Features:
Core App Logic:
Seller: Register MSME, mark as distressed, enter financials

Buyer: View filtered MSMEs, shortlist, express interest

Agent: View assigned sellers, match buyers, track commission (mock)

Admin: Approve listings, basic analytics

ML + Doc Mocks:
valuationService.js: Mock valuation based on turnover, assets, distress

matchmaking.js: Return best matches based on buyer preferences

generateDoc.js: Generate a mock PDF string (base64 or simple text)

DB:
PostgreSQL schema using SQL or Sequelize

Include seed data for sellers, buyers, agents

Portability:
âœ… Add .env.example with ports, DB_URL, etc.

âœ… Add comments in auth to switch to Replit Auth if needed

âœ… Instructions in README.md to run on:

Replit

Localhost

Railway/Render

Deliver:
Fully working monorepo app (React + Express + PostgreSQL)

Instructions to run: npm install && npm run dev

PostgreSQL setup: createTables.sql or ORM-based

All mock services to be easily replaceable by future microservices

Emphasize clean code, modularity, and portability.

ðŸ›  Example README Instruction (Auto-generated by GPT from prompt):
md
Copy
Edit
# MSMEAtlas â€“ Fullstack Buyer-Seller MSME Marketplace

## ðŸ§± Tech Stack
- React + Tailwind (Frontend)
- Node.js + Express (Backend)
- PostgreSQL (Database)

## ðŸ›  Run Locally (Replit Optional)
1. Clone this repo
2. Create `.env` file using `.env.example`
3. Start PostgreSQL server (use Docker, Railway, or Replit DB)
4. Run backend:
   ```bash
   cd backend
   npm install
   npm run dev
Run frontend:

bash
Copy
Edit
cd frontend
npm install
npm run dev